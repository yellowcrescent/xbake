#!/usr/bin/env python
# coding=utf-8
###############################################################################
#
# yc_xbake
# YC XBake: Video file scanning, renaming, sub baking and transcoding utility
#
# @author   J. Hipps <jacob@ycnrg.org>
# @repo     https://bitbucket.org/yellowcrescent/yc_xbake
#
# Copyright (c) 2013-2015 J. Hipps / Neo-Retro Group
#
# https://ycnrg.org/
#
# @deps     xbake
#
###############################################################################

import sys
import os
import re
import json
import signal
import optparse
import operator
import time

# Logging & Error handling
from xbake.common.logthis import C
from xbake.common.logthis import LL
from xbake.common.logthis import logthis
from xbake.common.logthis import ER
from xbake.common.logthis import failwith
from xbake.common.logthis import loglevel
from xbake.common.logthis import exceptionHandler

from xbake.common import rcfile
from xbake.xcode import ffmpeg
from xbake.xcode import xcode
from xbake.mscan import mscan
from xbake.srv import daemon

oparser = None

class xsetup:
    """Contains version information and globals"""
    ## Version info
    version = "0.10.9"
    vdate   = "02 Oct 2015"

    config   =  None
    lconfig  =  None
    defaults =  {
                    'run': {
                        'mode': None,
                        'infile': None,
                        'outfile': None,
                        'id': None,
                        'bake': False,
                        'vscap': None,
                        'single': False
                    },
                    'core': {
                        'loglevel': LL.INFO
                    },
                    'vid': {
                        'autoid': 1,
                        'location': None,
                        'vername': None
                    },
                    'vscap': {
                        'basedir': ".",
                        'webp_m': 6,
                        'webp_q': 90
                    },
                    'mongo': {
                        'host': "localhost",
                        'port': 27017,
                        'database': "ycplay"
                    },
                    'redis': {
                        'host': "localhost",
                        'port': 6379,
                        'db': 0
                    },
                    'xcode': {
                        'subtype': "ass",
                        'subid': "auto",
                        'abr': 128,
                        'downmix': 'auto',
                        'acopy': 'auto',
                        'aid': None,
                        'srt_style': "FontName=MyriadPro-Semibold,Outline=1,Shadow=1,FontSize=24",
                        'fontdir': None,
                        'scale': None,
                        'flv': False,
                        'anamorphic': False
                    },
                    'scan': {
                        'scraper': "tvdb",
                        'mforce': False,
                        'nochecksum': False,
                        'savechecksum': True,
                        'output': None
                    },
                    'tvdb': {
                        'mirror': "http://thetvdb.com",
                        'imgbase': "http://thetvdb.com/banners",
                        'apikey': False
                    },
                    'mal': {
                        'user': False,
                        'password': False
                    },
                    'ffmpeg': {
                        'path': False
                    },
                    'srv': {
                        'iface': "0.0.0.0",
                        'port': 7037,
                        'nofork': False,
                        'debug': False,
                        'shared_key': ''
                    }
                }

def show_banner():
    """
    Display banner
    """
    print ""
    print C.CYN, "*** ", C.WHT, "yc_xbake", C.OFF
    print C.CYN, "*** ", C.CYN, "Version", xsetup.version, "(" + xsetup.vdate + ")", C.OFF
    print C.CYN, "*** ", C.GRN, "Copyright (c) 2013-2015 J. Hipps / Neo-Retro Group", C.OFF
    print C.CYN, "*** ", C.GRN, "J. Hipps <jacob@ycnrg.org>", C.OFF
    print C.CYN, "*** ", C.YEL, "https://ycnrg.org/", C.OFF
    print ""

def parse_cli():
    """
    Parse command-line options
    """
    global oparser
    oparser = optparse.OptionParser(usage="%prog <--xcode|--scan|--ssonly> [options] -i INFILE [-o OUTFILE]",version=xsetup.version+" ("+xsetup.vdate+")")

    # General options
    oparser.add_option('-v', '--verbose', action="count", dest="run.verbose", help="Increase logging verbosity (-v Verbose, -vv Debug, -vvv Debug2)")
    oparser.add_option('-L','--loglevel', action="store", dest="core.loglevel", default=False,metavar="NUM", help="Logging output verbosity (4=error,5=warning,6=info,7=verbose,8=debug,9=debug2)")
    oparser.add_option('-i','--infile', action="store", dest="run.infile", default=False,metavar="PATH", help="Input file or directory")
    oparser.add_option('-o','--out', action="store", dest="run.outfile", default=False,metavar="FILE", help="Output file")

    # Mode selection options
    opg_mode = optparse.OptionGroup(oparser, "Mode Selection", "Choose operations mode for XBake (required). These options are mutually-exclusive.")
    opg_mode.add_option('--xcode',action="store_const",dest="run.mode",const="xcode",default=False,help="Transcode")
    opg_mode.add_option('--scan',action="store_const",dest="run.mode",const="scan",default=False,help="Scan for & catalogue media")
    opg_mode.add_option('--ssonly',action="store_const",dest="run.mode",const="ssonly",default=False,help="Capture screenshot only")
    opg_mode.add_option('-d','--server',action="store_const",dest="run.mode",const="srv",default=False,help="Run as a daemon (API server)")

    # Scanning options
    opg_scan = optparse.OptionGroup(oparser, "Scanning", "Options for media scanner")
    opg_scan.add_option('-S','--single',action="store_true",dest="run.single",default=False,help="Single-file Mode")
    opg_scan.add_option('-X','--nosend',action="store_true",dest="scan.nosend",default=False,help="Disable sending data to remote server")
    opg_scan.add_option('--scraper',action="store",dest="scan.scraper",default=False,metavar="ID",help="Choose scraper to use [tvdb,mal,ann] (default=tvdb)")
    opg_scan.add_option('--pretty',action="store_true",dest="scan.pretty",default=False,help="Pretty-print JSON output")
    opg_scan.add_option('-Z','--nochecksum',action="store_true",dest="scan.nochecksum",default=False,help="Disable checksum calculation during file scanning")
    opg_scan.add_option('--nosave',action="store_false",dest="scan.savechecksum",default=False,help="Do not save checksum results in file extended attributes")
    opg_scan.add_option('--mforce',action="store_true",dest="scan.mforce",default=False,help="Force rescan all files, even if no changes detected")

    # Transcoding options
    opg_xcode = optparse.OptionGroup(oparser, "Transcoding", "Options for transcoding video")
    opg_xcode.add_option('--bake',action="store_true",dest="run.bake",default=False,metavar="SUBID",help="Bake subtitles (hardsub)")
    opg_xcode.add_option('--subid',action="store",dest="xcode.subid",default=False,metavar="SUBID",help="Subtitle track ID (default=auto, track marked 'default')")
    opg_xcode.add_option('--subtype',action="store",dest="xcode.subtype",default=False,metavar="TYPE",help="Specify subtitle track type [ass,srt] (default=ass)")
    opg_xcode.add_option('-x','--scale',action="store",dest="xcode.scale",default=False,metavar="RES",help="Scale video resolution (RES=width:height)")
    opg_xcode.add_option('--anamorphic',action="store_true",dest="xcode.anamorphic",default=False,help="Perform anamorphic widescreen compensation")
    opg_xcode.add_option('--aid',action="store",dest="xcode.aid",default=False,metavar="AID",help="Audio track ID (default=auto, track marked 'default')")
    opg_xcode.add_option('--abr',action="store",dest="xcode.abr",default=False,metavar="KBPS",help="Audio bitrate in kbps (default=128)")
    opg_xcode.add_option('--acopy',action="store_true",dest="xcode.acopy",default=False,help="Audio track, direct stream copy (default if stream is AAC Stereo)")
    opg_xcode.add_option('--downmix',action="store_true",dest="xcode.downmix",default=False,help="Downmix audio from 5.1 to Stereo")
    opg_xcode.add_option('--flv',action="store_true",dest="xcode.flv",default=False,help="Output in FLV container")
    opg_xcode.add_option('--daignore',action="store_true",dest="xcode.daignore",default=False,help="Ignore errors when dumping attachments")

    # Framegrab options
    opg_vscap = optparse.OptionGroup(oparser, "Framegrab", "Options for screenshot capture")
    opg_vscap.add_option('--vscap',action="store",dest="run.vscap",default=False,metavar="OFFSET",help="Capture frame at specified OFFSET in seconds (integer)")

    # Versioning options
    opg_version = optparse.OptionGroup(oparser, "ID & Version Info", "Options for file ID and encode versioning")
    opg_version.add_option('-q','--id',action="store",dest="run.id",default=False,metavar="ID",help="Specify file ID; metadata is pulled from database")
    opg_version.add_option('-A','--autoid',action="store_true",dest="vid.autoid",default=False,help="Calculate ID from MD5 checksum (use for existing entries)")
    opg_version.add_option('-H','--location',action="store",dest="vid.location",default=False,metavar="HOSTKEY",help="Specify source location key (hostname with underscores)")
    opg_version.add_option('--vername',action="store",dest="vid.vername",default=False,metavar="NAME",help="Specify version name")

    # Metadata options
    opg_meta = optparse.OptionGroup(oparser, "Metadata", "Options for specifying additional metadata which will be included in the database entry for this video")
    opg_meta.add_option('--title',action="store",dest="run.title",default=False,metavar="VAL",help="Metadata: Episode/Video Title")
    opg_meta.add_option('--series',action="store",dest="run.series",default=False,metavar="VAL",help="Metadata: Series Title")
    opg_meta.add_option('--episode',action="store",dest="run.episode",default=False,metavar="NUM",help="Metadata: Episode Number")
    opg_meta.add_option('--season',action="store",dest="run.season",default=False,metavar="NUM",help="Metadata: Season Number")
    opg_meta.add_option('--special',action="store",dest="run.special",default=False,metavar="VAL",help="Metadata: Special Episode Title")
    opg_meta.add_option('--fansub',action="store",dest="run.fansub",default=False,metavar="GROUP",help="Metadata: Fansub Group Name")
    opg_meta.add_option('--dub',action="store",dest="run.dub",default=False,metavar="LANG",help="Metadata: Dub Language")

    # Daemon/Server options
    opg_srv = optparse.OptionGroup(oparser, "Daemon", "Options that apply when XBake is running as a daemon (server mode)")
    opg_srv.add_option('--iface',action="store",dest="srv.iface",default=False,metavar="IP",help="Interface to bind to [default: 0.0.0.0]")
    opg_srv.add_option('--port',action="store",dest="srv.port",default=False,metavar="PORT",help="Port to listen on [default: 7037]")
    opg_srv.add_option('--nofork',action="store_true",dest="srv.nofork",default=False,help="Don't fork (stay loaded in the foreground)")
    opg_srv.add_option('--debug',action="store_true",dest="srv.debug",default=False,help="Enable debug mode (Flask)")

    # add groups to parser
    oparser.add_option_group(opg_mode)
    oparser.add_option_group(opg_scan)
    oparser.add_option_group(opg_xcode)
    oparser.add_option_group(opg_vscap)
    oparser.add_option_group(opg_version)
    oparser.add_option_group(opg_meta)
    oparser.add_option_group(opg_srv)

    options, args = oparser.parse_args(sys.argv[1:])
    vout = vars(options)

    if vout['run.verbose']:
        vout['run.verbose'] += 6
        vout['core.loglevel'] = vout['run.verbose']
    if vout['run.verbose'] or vout['core.loglevel']:
        loglevel(int(vout['core.loglevel']))

    return vout

##############################################################################
## Entry point
##

if __name__ == '__main__':

    # Show banner
    if len(sys.argv) < 2 or sys.argv[1] != '--version' and sys.argv[1] != '-q':
        show_banner()

    # Set default loglevel
    loglevel(xsetup.defaults['core']['loglevel'])

    # parse CLI options and load running config
    xopt = parse_cli()
    rcfile.loadConfig(cliopts=xopt)
    loglevel(xsetup.config['core']['loglevel'])

    # Get ffmpeg version
    ffmpeg.locateAll()
    ffver = ffmpeg.version()
    logthis("FFmpeg Version:",suffix="%s (%s)" % (ffver['version'],ffver['date']),loglevel=LL.VERBOSE)

    # Ready
    logthis("Configuration done. xsetup.config =",suffix=xsetup.config,loglevel=LL.DEBUG)

    # Set quiet exception handler for non-verbose operation
    if xsetup.config['core']['loglevel'] < LL.VERBOSE:
        sys.excepthook = exceptionHandler

    if xsetup.config['run']['mode'] == "xcode":
        xcode.run(xsetup.config['run']['infile'],xsetup.config['run']['outfile'],xsetup.config['vid']['vername'])
    elif xsetup.config['run']['mode'] == "scan":
        mscan.run(xsetup.config['run']['infile'],xsetup.config['run']['outfile'])
    elif xsetup.config['run']['mode'] == "srv":
        daemon.start(xsetup.config['srv']['iface'],xsetup.config['srv']['port'],xsetup.config['srv']['debug'])
    else:
        oparser.print_help()
